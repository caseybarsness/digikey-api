# coding: utf-8

"""
    Barcoding

    Retrieve package information from the barcode.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from digikey.v3.barcoding.configuration import Configuration


class PackListBarcodeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'salesorder_id': 'int',
        'invoice_id': 'int',
        'pack_list_number': 'int',
        'pack_list_details': 'list[PackListDetail]'
    }

    attribute_map = {
        'salesorder_id': 'SalesorderId',
        'invoice_id': 'InvoiceId',
        'pack_list_number': 'PackListNumber',
        'pack_list_details': 'PackListDetails'
    }

    def __init__(self, salesorder_id=None, invoice_id=None, pack_list_number=None, pack_list_details=None, _configuration=None):  # noqa: E501
        """PackListBarcodeResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._salesorder_id = None
        self._invoice_id = None
        self._pack_list_number = None
        self._pack_list_details = None
        self.discriminator = None

        if salesorder_id is not None:
            self.salesorder_id = salesorder_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if pack_list_number is not None:
            self.pack_list_number = pack_list_number
        if pack_list_details is not None:
            self.pack_list_details = pack_list_details

    @property
    def salesorder_id(self):
        """Gets the salesorder_id of this PackListBarcodeResponse.  # noqa: E501

        The Id for the Salesorder.  # noqa: E501

        :return: The salesorder_id of this PackListBarcodeResponse.  # noqa: E501
        :rtype: int
        """
        return self._salesorder_id

    @salesorder_id.setter
    def salesorder_id(self, salesorder_id):
        """Sets the salesorder_id of this PackListBarcodeResponse.

        The Id for the Salesorder.  # noqa: E501

        :param salesorder_id: The salesorder_id of this PackListBarcodeResponse.  # noqa: E501
        :type: int
        """

        self._salesorder_id = salesorder_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this PackListBarcodeResponse.  # noqa: E501

        The Id for the invoice.  # noqa: E501

        :return: The invoice_id of this PackListBarcodeResponse.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this PackListBarcodeResponse.

        The Id for the invoice.  # noqa: E501

        :param invoice_id: The invoice_id of this PackListBarcodeResponse.  # noqa: E501
        :type: int
        """

        self._invoice_id = invoice_id

    @property
    def pack_list_number(self):
        """Gets the pack_list_number of this PackListBarcodeResponse.  # noqa: E501

        PackList number.  # noqa: E501

        :return: The pack_list_number of this PackListBarcodeResponse.  # noqa: E501
        :rtype: int
        """
        return self._pack_list_number

    @pack_list_number.setter
    def pack_list_number(self, pack_list_number):
        """Sets the pack_list_number of this PackListBarcodeResponse.

        PackList number.  # noqa: E501

        :param pack_list_number: The pack_list_number of this PackListBarcodeResponse.  # noqa: E501
        :type: int
        """

        self._pack_list_number = pack_list_number

    @property
    def pack_list_details(self):
        """Gets the pack_list_details of this PackListBarcodeResponse.  # noqa: E501

        List of PackList Details.  # noqa: E501

        :return: The pack_list_details of this PackListBarcodeResponse.  # noqa: E501
        :rtype: list[PackListDetail]
        """
        return self._pack_list_details

    @pack_list_details.setter
    def pack_list_details(self, pack_list_details):
        """Sets the pack_list_details of this PackListBarcodeResponse.

        List of PackList Details.  # noqa: E501

        :param pack_list_details: The pack_list_details of this PackListBarcodeResponse.  # noqa: E501
        :type: list[PackListDetail]
        """

        self._pack_list_details = pack_list_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackListBarcodeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackListBarcodeResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackListBarcodeResponse):
            return True

        return self.to_dict() != other.to_dict()
