# coding: utf-8

"""
    Barcoding

    Retrieve package information from the barcode.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from digikey.v3.barcoding.configuration import Configuration


class Product2DBarcodeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digi_key_part_number': 'str',
        'manufacturer_part_number': 'str',
        'manufacturer_name': 'str',
        'product_description': 'str',
        'quantity': 'int',
        'salesorder_id': 'int',
        'invoice_id': 'int',
        'purchase_order': 'str',
        'country_of_origin': 'str',
        'lot_code': 'str',
        'date_code': 'str'
    }

    attribute_map = {
        'digi_key_part_number': 'DigiKeyPartNumber',
        'manufacturer_part_number': 'ManufacturerPartNumber',
        'manufacturer_name': 'ManufacturerName',
        'product_description': 'ProductDescription',
        'quantity': 'Quantity',
        'salesorder_id': 'SalesorderId',
        'invoice_id': 'InvoiceId',
        'purchase_order': 'PurchaseOrder',
        'country_of_origin': 'CountryOfOrigin',
        'lot_code': 'LotCode',
        'date_code': 'DateCode'
    }

    def __init__(self, digi_key_part_number=None, manufacturer_part_number=None, manufacturer_name=None, product_description=None, quantity=None, salesorder_id=None, invoice_id=None, purchase_order=None, country_of_origin=None, lot_code=None, date_code=None, _configuration=None):  # noqa: E501
        """Product2DBarcodeResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._digi_key_part_number = None
        self._manufacturer_part_number = None
        self._manufacturer_name = None
        self._product_description = None
        self._quantity = None
        self._salesorder_id = None
        self._invoice_id = None
        self._purchase_order = None
        self._country_of_origin = None
        self._lot_code = None
        self._date_code = None
        self.discriminator = None

        if digi_key_part_number is not None:
            self.digi_key_part_number = digi_key_part_number
        if manufacturer_part_number is not None:
            self.manufacturer_part_number = manufacturer_part_number
        if manufacturer_name is not None:
            self.manufacturer_name = manufacturer_name
        if product_description is not None:
            self.product_description = product_description
        if quantity is not None:
            self.quantity = quantity
        if salesorder_id is not None:
            self.salesorder_id = salesorder_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if country_of_origin is not None:
            self.country_of_origin = country_of_origin
        if lot_code is not None:
            self.lot_code = lot_code
        if date_code is not None:
            self.date_code = date_code

    @property
    def digi_key_part_number(self):
        """Gets the digi_key_part_number of this Product2DBarcodeResponse.  # noqa: E501

        The Digi-Key part number.  # noqa: E501

        :return: The digi_key_part_number of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._digi_key_part_number

    @digi_key_part_number.setter
    def digi_key_part_number(self, digi_key_part_number):
        """Sets the digi_key_part_number of this Product2DBarcodeResponse.

        The Digi-Key part number.  # noqa: E501

        :param digi_key_part_number: The digi_key_part_number of this Product2DBarcodeResponse.  # noqa: E501
        :type: str
        """

        self._digi_key_part_number = digi_key_part_number

    @property
    def manufacturer_part_number(self):
        """Gets the manufacturer_part_number of this Product2DBarcodeResponse.  # noqa: E501

        The manufacturer part number.  # noqa: E501

        :return: The manufacturer_part_number of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_part_number

    @manufacturer_part_number.setter
    def manufacturer_part_number(self, manufacturer_part_number):
        """Sets the manufacturer_part_number of this Product2DBarcodeResponse.

        The manufacturer part number.  # noqa: E501

        :param manufacturer_part_number: The manufacturer_part_number of this Product2DBarcodeResponse.  # noqa: E501
        :type: str
        """

        self._manufacturer_part_number = manufacturer_part_number

    @property
    def manufacturer_name(self):
        """Gets the manufacturer_name of this Product2DBarcodeResponse.  # noqa: E501

        Manufacturer of the product.  # noqa: E501

        :return: The manufacturer_name of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_name

    @manufacturer_name.setter
    def manufacturer_name(self, manufacturer_name):
        """Sets the manufacturer_name of this Product2DBarcodeResponse.

        Manufacturer of the product.  # noqa: E501

        :param manufacturer_name: The manufacturer_name of this Product2DBarcodeResponse.  # noqa: E501
        :type: str
        """

        self._manufacturer_name = manufacturer_name

    @property
    def product_description(self):
        """Gets the product_description of this Product2DBarcodeResponse.  # noqa: E501

        Catalog description of the product.  # noqa: E501

        :return: The product_description of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this Product2DBarcodeResponse.

        Catalog description of the product.  # noqa: E501

        :param product_description: The product_description of this Product2DBarcodeResponse.  # noqa: E501
        :type: str
        """

        self._product_description = product_description

    @property
    def quantity(self):
        """Gets the quantity of this Product2DBarcodeResponse.  # noqa: E501

        Quantity of the product.  # noqa: E501

        :return: The quantity of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Product2DBarcodeResponse.

        Quantity of the product.  # noqa: E501

        :param quantity: The quantity of this Product2DBarcodeResponse.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def salesorder_id(self):
        """Gets the salesorder_id of this Product2DBarcodeResponse.  # noqa: E501

        The Id for the Salesorder. Note that if the barcode was from a \"Prepack\" label, this will not be populated.  # noqa: E501

        :return: The salesorder_id of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: int
        """
        return self._salesorder_id

    @salesorder_id.setter
    def salesorder_id(self, salesorder_id):
        """Sets the salesorder_id of this Product2DBarcodeResponse.

        The Id for the Salesorder. Note that if the barcode was from a \"Prepack\" label, this will not be populated.  # noqa: E501

        :param salesorder_id: The salesorder_id of this Product2DBarcodeResponse.  # noqa: E501
        :type: int
        """

        self._salesorder_id = salesorder_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this Product2DBarcodeResponse.  # noqa: E501

        The Id for the invoice. Note that if the barcode was from a \"Prepack\" label, this will not be populated.  # noqa: E501

        :return: The invoice_id of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this Product2DBarcodeResponse.

        The Id for the invoice. Note that if the barcode was from a \"Prepack\" label, this will not be populated.  # noqa: E501

        :param invoice_id: The invoice_id of this Product2DBarcodeResponse.  # noqa: E501
        :type: int
        """

        self._invoice_id = invoice_id

    @property
    def purchase_order(self):
        """Gets the purchase_order of this Product2DBarcodeResponse.  # noqa: E501

        Customer PurchaseOrder (custom notes or identifier) on the order. Note that if the barcode was from a \"Prepack\" label, this will not be populated.  # noqa: E501

        :return: The purchase_order of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this Product2DBarcodeResponse.

        Customer PurchaseOrder (custom notes or identifier) on the order. Note that if the barcode was from a \"Prepack\" label, this will not be populated.  # noqa: E501

        :param purchase_order: The purchase_order of this Product2DBarcodeResponse.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this Product2DBarcodeResponse.  # noqa: E501

        The country that the product orginates from.  # noqa: E501

        :return: The country_of_origin of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this Product2DBarcodeResponse.

        The country that the product orginates from.  # noqa: E501

        :param country_of_origin: The country_of_origin of this Product2DBarcodeResponse.  # noqa: E501
        :type: str
        """

        self._country_of_origin = country_of_origin

    @property
    def lot_code(self):
        """Gets the lot_code of this Product2DBarcodeResponse.  # noqa: E501

        The Lot Code  # noqa: E501

        :return: The lot_code of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._lot_code

    @lot_code.setter
    def lot_code(self, lot_code):
        """Sets the lot_code of this Product2DBarcodeResponse.

        The Lot Code  # noqa: E501

        :param lot_code: The lot_code of this Product2DBarcodeResponse.  # noqa: E501
        :type: str
        """

        self._lot_code = lot_code

    @property
    def date_code(self):
        """Gets the date_code of this Product2DBarcodeResponse.  # noqa: E501

        The date code  # noqa: E501

        :return: The date_code of this Product2DBarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._date_code

    @date_code.setter
    def date_code(self, date_code):
        """Sets the date_code of this Product2DBarcodeResponse.

        The date code  # noqa: E501

        :param date_code: The date_code of this Product2DBarcodeResponse.  # noqa: E501
        :type: str
        """

        self._date_code = date_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product2DBarcodeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product2DBarcodeResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Product2DBarcodeResponse):
            return True

        return self.to_dict() != other.to_dict()
